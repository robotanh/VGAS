
        namespace Working
        {
            String VNPAYQR = "";
            int32_t currentColQR = 0;
            int32_t soTienDaNhan = 0, soTienChuaNhan = 0, selectedColPrice = 0, selectedCol = 0;
            int wifiSignal = -1, nhietDoKhoangLanh = 0, gsmSignal = 0, serverConnected = 0;
            WORKING_STATE_TYPE WORKING_STATE;
            uint32_t vnpTransactionID = 0;
            const uint8_t keypadMaxLength = 50;
            int8_t keyPadData[50];
            uint8_t keyPadIdx = 0;
            bool updateDisplay = false;
            uint32_t displayTick = 0;

            void keyPadProcess();
            WiFiClient client;
            String typePayM;
            bool isMPOSTrans = false;
            uint32_t currentTransMposID = 0;
            int payCode = 6;

            void payout()
            {
                int32_t totalPayout = 0;
                if (Validator.BV->rejectBill() == BV_CMD_SUCCESS)
                {
                    soTienChuaNhan = 0;
                }
                if ((soTienChuaNhan == 0) && (soTienDaNhan == 0))
                    return;
                Display::Working::nhanLaiTienThua();

                if (soTienDaNhan == 0)
                {
                    delay(600);
                    return;
                }

                if (soTienDaNhan)
                {
                    if (Validator.BV->payoutValue(soTienDaNhan, &totalPayout) == BV_CMD_SUCCESS)
                    {
                        soTienDaNhan -= totalPayout;
                    }
                }
                if (soTienDaNhan < 0)
                    soTienDaNhan = 0;
            }

            void loop()
            {
                keyPadProcess();
                if (updateDisplay || ((uint32_t)(millis() - displayTick) > 1000))
                {
                    updateDisplay = false;
                    Display::Working::loop();
                    displayTick = millis();
                }
                Config::loop();
            }

            void OnCreditCallback(unsigned long value)
            {
                soTienDaNhan += value;
                soTienChuaNhan = 0;
                updateDisplay = true;
                userIdeTick = millis();
                beep_buzz(500);
            }

            void OnCashBoxCreditCallback(unsigned long value)
            {
                soTienDaNhan += value;
                soTienChuaNhan = 0;
                userIdeTick = millis();
                updateDisplay = true;
                Config::cashBoxAddNewNote(value);
                beep_buzz(500);
            }

            void OnEscrowCreditCallback(unsigned long value)
            {
                soTienChuaNhan = value;
                userIdeTick = millis();
                updateDisplay = true;
            }

            void OnBillRejectedCallback(unsigned long value)
            {
                userIdeTick = millis();
                soTienChuaNhan = 0;
                updateDisplay = true;
            }

            void keyPadProcess()
            {
                char lReceivedValue;
                static uint32_t tick = millis();
                if (xQueueReceive(KeypadQueue, &lReceivedValue, 5) == pdPASS)
                {
                    keypadHandler(lReceivedValue);
                    userIdeTick = millis();
                    updateDisplay = true;
                    tick = millis();
                }
                uint32_t timeout = 60000;
                if (VNPAYQR.length())
                {
                    if (Config::getSettings().extraConfig.timerQR == 0)
                    {
                        timeout = 60000;
                        Config::SetTimerQR(1);
                    }
                    else
                        timeout = (Config::getSettings().extraConfig.timerQR) * 60000;
                }

                if ((uint32_t)(millis() - tick) > timeout)
                {
                    clearKeypadData();
                }
                if ((uint32_t)(millis() - userIdeTick) > 180000)
                {
                    accessMDBBus(payout, 500);
                    userIdeTick = millis();
                }
            }

            void clearKeypadData()
            {
                for (int i = 0; i < keypadMaxLength; i++)
                {
                    keyPadData[i] = 0;
                }
                keyPadIdx = 0;
                selectedColPrice = 0;
                selectedCol = 0;
                typePayM = "";
                VNPAYQR = "";
                payCode = 6;
                xQueueReset(KeypadQueue);
            }

            void checkKeypadData()
            {
                // char _data[4];
                // if (TOTAL_SLOTS > 60)
                // {
                //     _data[0] = keyPadData[0];
                //     _data[1] = keyPadData[1];
                //     _data[2] = keyPadData[2];
                //     _data[3] = 0;
                // }
                // else
                // {
                //     _data[0] = keyPadData[0];
                //     _data[1] = keyPadData[1];
                //     _data[2] = 0;
                // }

                //                 uint8_t col = atoi(_data);
                // #if defined(USE_RFID)
                //                 if (col == 99)
                //                 {
                //                     selectedColPrice = 9999999999;
                //                     selectedCol = 99;
                //                     return;
                //                 }
                // #endif

                // if (col > TOTAL_SLOTS)
                // {
                //     clearKeypadData();
                //     Display::Working::chonSanPhamKhac();
                //     return;
                // }

                // if (Config::isColError(col))
                // {
                //     clearKeypadData();
                //     Display::Working::chonSanPhamKhac();
                //     return;
                // }

                // int32_t price = Config::getColPrice(col);

                // if (price == 0)
                // {
                //     clearKeypadData();
                //     Display::Working::chonSanPhamKhac();
                //     return;
                // }
                // selectedColPrice = price;
                // selectedCol = col;
            }

            String getVNPAYCODE(int32_t col, int32_t price, uint32_t vnpTransactionId, uint32_t mTransactionId)
            {
                u8g2.clearBuffer(); // clear the internal memory
                u8g2.drawFrame(0, 0, 128, 64);
                u8g2.setFont(u8g2_font_timB08_tf); // Courier New Bold 10,12,14,18,24
                u8g2.setCursor(35, 15);
                u8g2.println("DANG XU LY");
                u8g2.setCursor(15, 35);
                u8g2.println("Vui Long Cho Giay Lat");
                u8g2.setCursor(35, 55);
                u8g2.println(apSSID);
                u8g2.sendBuffer();
                DynamicJsonDocument doc(2000);
                char url[1024];
                char httpRequestData[1024];
                doc["mID"] = apSSID;
                doc["mTransactionId"] = mTransactionId;
                doc["transactionId"] = vnpTransactionId;
                doc["amount"] = price;
                doc["col"] = col;
                serializeJson(doc, httpRequestData);
                sprintf(url, "http://%s/payments/vnpay/newOrders", API);
                int httpStatus = -1;
                String payload = postJsonData(url, httpRequestData, &httpStatus);
                if (httpStatus == 200)
                {
                    // Serial.println(payload);
                    DeserializationError error = deserializeJson(doc, payload);
                    doc.shrinkToFit();
                    if ((error) || (doc["qrData"].as<String>() == "") || (!selectedCol) || (!selectedColPrice))
                    {
                        // Serial.printf("paser error: %d\n", error.code());
                        return "";
                    }
                    typePayM = doc["typePayment"].as<String>();
                    payCode = doc["PayCode"].as<int>();
                    return doc["qrData"].as<String>();
                }
                else
                {
                    u8g2.clearBuffer(); // clear the internal memory
                    u8g2.drawFrame(0, 0, 128, 64);
                    u8g2.setFont(u8g2_font_timB08_tf); // Courier New Bold 10,12,14,18,24
                    u8g2.setCursor(35, 15);
                    u8g2.println("THAT BAI");
                    u8g2.setCursor(35, 35);
                    u8g2.printf("CODE : %d", httpStatus);
                    u8g2.setCursor(35, 55);
                    u8g2.println(apSSID);
                    u8g2.sendBuffer();
                    delay(1000);
                    // Serial.printf("HTTP Response code: %d\n", httpStatus);
                }
                return "";
            }

#if defined(USE_MPOS_HTTP)
            bool newOrderMPOS(int32_t col, int32_t price, uint32_t vnpTransactionId, uint32_t mTransactionId)
            {
                DynamicJsonDocument doc(2000);
                char url[1024];
                char httpRequestData[1024];
                doc["mID"] = apSSID;
                doc["mTransactionId"] = mTransactionId;
                doc["transactionId"] = vnpTransactionId;
                doc["amount"] = price;
                doc["col"] = col;
                serializeJson(doc, httpRequestData);
                sprintf(url, "http://%s/payments/mpos/newOrders", API);
                int httpStatus = -1;
                String payload = postJsonData(url, httpRequestData, &httpStatus);
                if (httpStatus == 200)
                {
                    // Serial.printf("newOrderMPOS send: %s\nnewOrderMPOS res: %s\n", httpRequestData, payload.c_str());
                    DeserializationError error = deserializeJson(doc, payload);
                    doc.shrinkToFit();
                    if ((!error) && (doc["code"].as<int>() == 0))
                    {
                        // Serial.println("NEW ORDER MPOS SUCCESS");
                        isMPOSTrans = true;
                        currentTransMposID = vnpTransactionId;
                        return true;
                    }
                    else
                    {
                        // Serial.println("NEW ORDER MPOS FAILED");
                    }
                }
                else
                {
                    // Serial.printf("NEW ORDER MPOS SUCCESS FAILED CODE %d - %s\n", httpStatus, payload.c_str());
                }
                return false;
            }

            bool cancelOrderMPOS(uint32_t vnpTransactionId, uint32_t mTransactionId)
            {
                if (isMPOSTrans)
                {
                    DynamicJsonDocument doc(2000);
                    char url[1024];
                    char httpRequestData[1024];
                    doc["mID"] = apSSID;
                    doc["mTransactionId"] = mTransactionId;
                    doc["transactionId"] = vnpTransactionId;
                    serializeJson(doc, httpRequestData);
                    sprintf(url, "http://%s/payments/mpos/removeTransaction", API);
                    int httpStatus = -1;
                    String payload = postJsonData(url, httpRequestData, &httpStatus);
                    if (httpStatus == 200)
                    {
                        // Serial.printf("cancelOrderMPOS send %s cancelOrderMPOS res: %s\n", httpRequestData, payload.c_str());
                        DeserializationError error = deserializeJson(doc, payload);
                        doc.shrinkToFit();
                        if ((!error) && (doc["code"].as<int>() == 0))
                        {
                            // Serial.println("CANCEL ORDER MPOS SUCCESS");
                            isMPOSTrans = false;
                            return true;
                        }
                        else
                        {
                            // Serial.println("CANCEL ORDER MPOS FAILED");
                        }
                    }
                    else
                    {
                        // Serial.printf("CANCEL ORDER MPOS SUCCESS FAILED CODE %d - %s\n", httpStatus, payload.c_str());
                    }
                }
                return false;
            }

            int32_t checkOrderMPOS(uint32_t vnpTransactionId, uint32_t mTransactionId)
            {
                DynamicJsonDocument doc(1000);
                char httpRequestData[1024];
                char url[1024];
                doc["mID"] = apSSID;
                doc["mTransactionId"] = mTransactionId;
                doc["transactionId"] = vnpTransactionId;
                serializeJson(doc, httpRequestData);
                sprintf(url, "http://%s/payments/mpos/checkTransaction", API);
                int httpStatus = -1;
                String payload = postJsonData(url, httpRequestData, &httpStatus);
                if (httpStatus == 200)
                {
                    // Serial.printf("checkOrderMPOS res: %s\r\n", payload.c_str());
                    DeserializationError error = deserializeJson(doc, payload);
                    doc.shrinkToFit();
                    if (error)
                    {
                        return -1;
                    }
                    uint32_t amount = doc["amount"].as<uint32_t>();
                    if (amount >= 0)
                    {
                        if (amount > 0)
                        {
                            typePayM = doc["typePayment"].as<String>();
                            payCode = doc["PayCode"].as<int>();
                            isMPOSTrans = false;
                        }
                        return amount;
                    }
                }
                else
                {
                    // Serial.printf("checkOrderMPOS FAILED code %d - %s\n\n", httpStatus, payload.c_str());
                }
                return -1;
            }
#endif

#if defined(USE_RFID)
            String newCardIDTransaction(int32_t col, int32_t price, char *cardID, uint32_t mTransactionId)
            {
                DynamicJsonDocument doc(3000);
                char httpRequestData[1024];
                char url[1024];
                doc["machineId"] = apSSID;
                doc["serial"] = cardID;
                doc["transaction"] = mTransactionId;
                doc["slot"] = price;
                doc["value"] = col;
                serializeJson(doc, httpRequestData);
                doc.shrinkToFit();
                HTTPClient http;
                sprintf(url, "http://%s/vvend/transaction/create", API);
                http.begin(url);
                http.setConnectTimeout(500);
                http.setTimeout(1000);
                http.addHeader("Content-Type", "application/json");
                int status = http.POST(httpRequestData);
                if (status == 200)
                {
                    String payload = http.getString();
                    return payload;
                }
                http.end();
                return "";
            }
#endif

            int32_t getVNPAYTransactions(uint32_t vnpTransactionId, uint32_t mTransactionId)
            {
                DynamicJsonDocument doc(1000);
                char httpRequestData[1024];
                char url[1024];
                doc["mID"] = apSSID;
                doc["mTransactionId"] = mTransactionId;
                doc["transactionId"] = vnpTransactionId;
                serializeJson(doc, httpRequestData);
                sprintf(url, "http://%s/payments/vnpay/checkTransaction", API);
                int httpStatus = -1;
                String payload = postJsonData(url, httpRequestData, &httpStatus);
                if (httpStatus == 200)
                {
                    DeserializationError error = deserializeJson(doc, payload);
                    doc.shrinkToFit();
                    if (error)
                    {
                        return -1;
                    }
                    uint32_t amount = doc["amount"].as<uint32_t>();
                    if (amount > 0)
                    {
                        typePayM = doc["typePayment"].as<String>();
                        payCode = doc["PayCode"].as<int>();
                    }
                    return amount;
                }
                else
                {
                    // Serial.printf("HTTP Response code: %d\n", httpStatus);
                }
                return -1;
            }
        }
    